// Задание 1
// 1. Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно
// итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.
// 2. Создайте объект musicCollection, который содержит массив альбомов и имеет
// свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// 3. Реализуйте кастомный итератор для объекта musicCollection. Итератор должен
// перебирать альбомы по порядку.
// 4. Используйте цикл for...of для перебора альбомов в музыкальной коллекции и
// вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

//Структура альбома
const Album = {
    title: "Название альбома",
    artist: "Исполнитель",
    year: "Год выпуска",
};

//Массив альбомов
const albums = [
    {
      title: "The Dark Side of the Moon",
      artist: "Pink Floyd",
      year: 1973,
    },
    {
      title: "Rumours",
      artist: "Fleetwood Mac",
      year: 1977,
    },
    {
      title: "Thriller",
      artist: "Michael Jackson",
      year: 1982,
    },
];

//Итератор
const musicCollection = {
    albums,
    [Symbol.iterator]: function* () {
      for (const album of this.albums) {
        yield album;
      }
    },
};

//Вывод альбомов
for (const album of musicCollection) {
    console.log(`${album.title} - ${album.artist} (${album.year})`);
}




// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся
// на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.
// Необходимо создать систему управления этими заказами, которая позволит:
// 1. Отслеживать, какой повар готовит какое блюдо.
// 2. Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения
// заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

// const chefs = new Map([
//     ["Виктор", ["Пицца Маргарита", "Пицца Пепперони"]],
//     ["Ольга", ["Суши Филадельфия", "Суши Калифорния"]],
//     ["Дмитрий", ["Тирамису", "Чизкейк"]],
// ]);

// const orders = new Map();

// function addOrder(client, dish) {
//     if (!orders.has(client)) {
//         orders.set(client, []);
//     }
//     const clientOrders = orders.get(client);
//     clientOrders.push(dish);
// }

// function getChef(dish) {
//     for (const [chef, dishes] of chefs) {
//         if (dishes.includes(dish)) {
//             return chef;
//         }
//     }
//     return null;
// }

// // Примеры заказов
// const clientAlex = { name: "Алексей" };
// addOrder(clientAlex, "Пицца Пепперони");
// addOrder(clientAlex, "Тирамису");

// const clientMaria = { name: "Мария" };
// addOrder(clientMaria, "Суши Калифорния");
// addOrder(clientMaria, "Пицца Маргарита");

// const clientIrina = { name: "Ирина" };
// addOrder(clientIrina, "Чизкейк");

// // Вывод информации
// for (const [client, dishes] of orders) {
//     console.log(`Клиент: ${client.name}`);
//     for (const dish of dishes) {
//         const chef = getChef(dish);
//         console.log(`  - ${dish} (готовит: ${chef})`);
//     }
// }